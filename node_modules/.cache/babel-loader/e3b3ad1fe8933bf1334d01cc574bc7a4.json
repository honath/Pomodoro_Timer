{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport { findAllByTestId } from \"@testing-library/react\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport InitialState from \"./InitialState.js\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  //const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const initialTimerData = {\n    isTimerRunning: false,\n    inSession: false,\n    focusDuration: 25,\n    breakDuration: 5,\n    timeRemaining: 25\n  };\n  const [timerData, setTimerData] = useState({ ...initialTimerData\n  });\n  useInterval(() => {// ToDo: Implement what should happen when the timer is running\n  }, timerData.isTimerRunning ? 1000 : null);\n  /* //Play/pause button functionality\n  function playPause() {\n    setTimerData({\n      ...timerData,\n      isTimerRunning: !timerData.isTimerRunning,\n      inSession: true,\n    });\n  }\n   //Stop current session/reset timer/timerData\n  function stopSession() {\n    setTimerData({ ...initialTimerData });\n  }\n   //Adjust timer durations based on button clicked\n  function handleDurationClick({ target }) {\n    if (5 < timerData.focusDuration && timerData.focusDuration < 60) {\n      if (target.value === \"decreaseFocus\") {\n        setTimerData({\n          ...timerData,\n          focusDuration: timerData.focusDuration - 1,\n        });\n      } else if (target.value === \"increaseFocus\") {\n        setTimerData({\n          ...timerData,\n          focusDuration: timerData.focusDuration + 1,\n        });\n      }\n    }\n     if (1 < timerData.breakDuration && timerData.breakDuration < 15) {\n      if (target.value === \"decreaseBreak\") {\n        setTimerData({\n          ...timerData,\n          breakDuration: timerData.breakDuration - 1,\n        });\n      } else if (target.value === \"increaseBreak\") {\n        setTimerData({\n          ...timerData,\n          breakDuration: timerData.breakDuration + 1,\n        });\n      }\n    }\n  } */\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(InitialState, {\n    initialTimerData: initialTimerData,\n    timerData: timerData,\n    setTimerData: setTimerData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, \"Focusing for 25:00 minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, \"25:00 remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": \"0\" // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: \"0%\"\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }))))));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/Alex/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["findAllByTestId","React","useState","classNames","useInterval","InitialState","Pomodoro","initialTimerData","isTimerRunning","inSession","focusDuration","breakDuration","timeRemaining","timerData","setTimerData","height","width"],"mappings":";AAAA,SAASA,eAAT,QAAgC,wBAAhC;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;;AAEA,SAASC,QAAT,GAAoB;AAClB;AACA;AACA,QAAMC,gBAAgB,GAAG;AACvBC,IAAAA,cAAc,EAAE,KADO;AAEvBC,IAAAA,SAAS,EAAE,KAFY;AAGvBC,IAAAA,aAAa,EAAE,EAHQ;AAIvBC,IAAAA,aAAa,EAAE,CAJQ;AAKvBC,IAAAA,aAAa,EAAE;AALQ,GAAzB;AAQA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,EAAE,GAAGK;AAAL,GAAD,CAA1C;AAEAH,EAAAA,WAAW,CACT,MAAM,CACJ;AACD,GAHQ,EAITS,SAAS,CAACL,cAAV,GAA2B,IAA3B,GAAkC,IAJzB,CAAX;AAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,gBAAgB,EAAED,gBAAhC;AAAkD,IAAA,SAAS,EAAEM,SAA7D;AAAwE,IAAA,YAAY,EAAEC,YAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAFF,eAIE;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAJF,CADF,CAFF,eAYE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAc,GALhB,CAKoB;AALpB;AAME,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KANT,CAM0B;AAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAZF,CAFF,CADF;AAgCD;;AAED,eAAeV,QAAf","sourcesContent":["import { findAllByTestId } from \"@testing-library/react\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport InitialState from \"./InitialState.js\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  //const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const initialTimerData = {\n    isTimerRunning: false,\n    inSession: false,\n    focusDuration: 25,\n    breakDuration: 5,\n    timeRemaining: 25,\n  };\n\n  const [timerData, setTimerData] = useState({ ...initialTimerData });\n\n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n    },\n    timerData.isTimerRunning ? 1000 : null\n  );\n\n  /* //Play/pause button functionality\n  function playPause() {\n    setTimerData({\n      ...timerData,\n      isTimerRunning: !timerData.isTimerRunning,\n      inSession: true,\n    });\n  }\n\n  //Stop current session/reset timer/timerData\n  function stopSession() {\n    setTimerData({ ...initialTimerData });\n  }\n\n  //Adjust timer durations based on button clicked\n  function handleDurationClick({ target }) {\n    if (5 < timerData.focusDuration && timerData.focusDuration < 60) {\n      if (target.value === \"decreaseFocus\") {\n        setTimerData({\n          ...timerData,\n          focusDuration: timerData.focusDuration - 1,\n        });\n      } else if (target.value === \"increaseFocus\") {\n        setTimerData({\n          ...timerData,\n          focusDuration: timerData.focusDuration + 1,\n        });\n      }\n    }\n\n    if (1 < timerData.breakDuration && timerData.breakDuration < 15) {\n      if (target.value === \"decreaseBreak\") {\n        setTimerData({\n          ...timerData,\n          breakDuration: timerData.breakDuration - 1,\n        });\n      } else if (target.value === \"increaseBreak\") {\n        setTimerData({\n          ...timerData,\n          breakDuration: timerData.breakDuration + 1,\n        });\n      }\n    }\n  } */\n\n  return (\n    <div className=\"pomodoro\">\n      <InitialState initialTimerData={initialTimerData} timerData={timerData} setTimerData={setTimerData} />\n      <div>\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n            <h2 data-testid=\"session-title\">Focusing for 25:00 minutes</h2>\n            {/* TODO: Update message below to include time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              25:00 remaining\n            </p>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow=\"0\" // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: \"0%\" }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}