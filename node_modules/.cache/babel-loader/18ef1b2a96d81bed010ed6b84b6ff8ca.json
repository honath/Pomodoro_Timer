{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport { findAllByTestId } from \"@testing-library/react\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport InitialState from \"./InitialState.js\";\nimport ActiveState from \"./ActiveState.js\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\n\nfunction Pomodoro() {\n  //Initialize timer data and state\n  const initialTimerData = {\n    isTimerRunning: false,\n    inSession: false,\n    isBreak: false,\n    focusDuration: 25,\n    breakDuration: 5,\n    timeRemaining: 1500 //(25 min * 60 sec)\n\n  };\n  const [timerData, setTimerData] = useState({ ...initialTimerData\n  }); //Timer regulation\n\n  if (timerData.inSession) {\n    //Focus ends, change timer to break time.\n    if (!timerData.isBreak && timerData.timeRemaining == 0) {\n      setTimerData({ ...timerData,\n        isBreak: true,\n        timeRemaining: timerData.breakDuration * 60\n      });\n    } else if (timerData.isBreak && timerData.timeRemaining == 0) {\n      setTimerData({ ...initialTimerData\n      });\n    }\n  } //Format durations for display\n\n\n  const formattedDurations = {\n    focusMinutes: minutesToDuration(timerData.focusDuration),\n    focusSeconds: secondsToDuration(timerData.focusDuration * 60),\n    breakMinutes: minutesToDuration(timerData.breakDuration),\n    breakSeconds: secondsToDuration(timerData.breakDuration * 60),\n    timer: secondsToDuration(timerData.timeRemaining)\n  }; //Set useInterval to reduce time remaining by 1 second\n\n  useInterval(() => {\n    setTimerData({ ...timerData,\n      timeRemaining: timerData.timeRemaining - 1\n    });\n  }, timerData.isTimerRunning ? 1000 : null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(InitialState, {\n    initialTimerData: initialTimerData,\n    timerData: timerData,\n    setTimerData: setTimerData,\n    formattedDurations: formattedDurations,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ActiveState, {\n    initialTimerData: initialTimerData,\n    timerData: timerData,\n    setTimerData: setTimerData,\n    formattedDurations: formattedDurations,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/Alex/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["findAllByTestId","React","useState","classNames","useInterval","InitialState","ActiveState","minutesToDuration","secondsToDuration","Pomodoro","initialTimerData","isTimerRunning","inSession","isBreak","focusDuration","breakDuration","timeRemaining","timerData","setTimerData","formattedDurations","focusMinutes","focusSeconds","breakMinutes","breakSeconds","timer"],"mappings":";AAAA,SAASA,eAAT,QAAgC,wBAAhC;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,mBAArD;;AAEA,SAASC,QAAT,GAAoB;AAClB;AACA,QAAMC,gBAAgB,GAAG;AACvBC,IAAAA,cAAc,EAAE,KADO;AAEvBC,IAAAA,SAAS,EAAE,KAFY;AAGvBC,IAAAA,OAAO,EAAE,KAHc;AAIvBC,IAAAA,aAAa,EAAE,EAJQ;AAKvBC,IAAAA,aAAa,EAAE,CALQ;AAMvBC,IAAAA,aAAa,EAAE,IANQ,CAMF;;AANE,GAAzB;AAQA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,EAAE,GAAGQ;AAAL,GAAD,CAA1C,CAVkB,CAYlB;;AACA,MAAIO,SAAS,CAACL,SAAd,EAAyB;AACvB;AACA,QAAI,CAACK,SAAS,CAACJ,OAAX,IAAsBI,SAAS,CAACD,aAAV,IAA2B,CAArD,EAAwD;AACtDE,MAAAA,YAAY,CAAC,EACX,GAAGD,SADQ;AAEXJ,QAAAA,OAAO,EAAE,IAFE;AAGXG,QAAAA,aAAa,EAAGC,SAAS,CAACF,aAAV,GAA0B;AAH/B,OAAD,CAAZ;AAKD,KAND,MAMO,IAAIE,SAAS,CAACJ,OAAV,IAAqBI,SAAS,CAACD,aAAV,IAA2B,CAApD,EAAuD;AAC5DE,MAAAA,YAAY,CAAC,EAAE,GAAGR;AAAL,OAAD,CAAZ;AACD;AAGF,GA1BiB,CA4BlB;;;AACA,QAAMS,kBAAkB,GAAG;AACzBC,IAAAA,YAAY,EAAEb,iBAAiB,CAACU,SAAS,CAACH,aAAX,CADN;AAEzBO,IAAAA,YAAY,EAAEb,iBAAiB,CAACS,SAAS,CAACH,aAAV,GAA0B,EAA3B,CAFN;AAGzBQ,IAAAA,YAAY,EAAEf,iBAAiB,CAACU,SAAS,CAACF,aAAX,CAHN;AAIzBQ,IAAAA,YAAY,EAAEf,iBAAiB,CAACS,SAAS,CAACF,aAAV,GAA0B,EAA3B,CAJN;AAKzBS,IAAAA,KAAK,EAAEhB,iBAAiB,CAACS,SAAS,CAACD,aAAX;AALC,GAA3B,CA7BkB,CAuClB;;AACAZ,EAAAA,WAAW,CACT,MAAM;AACJc,IAAAA,YAAY,CAAC,EACX,GAAGD,SADQ;AAEXD,MAAAA,aAAa,EAAEC,SAAS,CAACD,aAAV,GAA0B;AAF9B,KAAD,CAAZ;AAID,GANQ,EAOTC,SAAS,CAACN,cAAV,GAA2B,IAA3B,GAAkC,IAPzB,CAAX;AAUA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AACE,IAAA,gBAAgB,EAAED,gBADpB;AAEE,IAAA,SAAS,EAAEO,SAFb;AAGE,IAAA,YAAY,EAAEC,YAHhB;AAIE,IAAA,kBAAkB,EAAEC,kBAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAOE,oBAAC,WAAD;AACE,IAAA,gBAAgB,EAAET,gBADpB;AAEE,IAAA,SAAS,EAAEO,SAFb;AAGE,IAAA,YAAY,EAAEC,YAHhB;AAIE,IAAA,kBAAkB,EAAEC,kBAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF;AAgBD;;AAED,eAAeV,QAAf","sourcesContent":["import { findAllByTestId } from \"@testing-library/react\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport InitialState from \"./InitialState.js\";\nimport ActiveState from \"./ActiveState.js\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\n\nfunction Pomodoro() {\n  //Initialize timer data and state\n  const initialTimerData = {\n    isTimerRunning: false,\n    inSession: false,\n    isBreak: false,\n    focusDuration: 25,\n    breakDuration: 5,\n    timeRemaining: 1500, //(25 min * 60 sec)\n  };\n  const [timerData, setTimerData] = useState({ ...initialTimerData });\n\n  //Timer regulation\n  if (timerData.inSession) {\n    //Focus ends, change timer to break time.\n    if (!timerData.isBreak && timerData.timeRemaining == 0) {\n      setTimerData({\n        ...timerData,\n        isBreak: true,\n        timeRemaining: (timerData.breakDuration * 60),\n      });\n    } else if (timerData.isBreak && timerData.timeRemaining == 0) {\n      setTimerData({ ...initialTimerData });\n    }\n\n\n  }\n\n  //Format durations for display\n  const formattedDurations = {\n    focusMinutes: minutesToDuration(timerData.focusDuration),\n    focusSeconds: secondsToDuration(timerData.focusDuration * 60),\n    breakMinutes: minutesToDuration(timerData.breakDuration),\n    breakSeconds: secondsToDuration(timerData.breakDuration * 60),\n    timer: secondsToDuration(timerData.timeRemaining),\n  };\n\n  \n\n  //Set useInterval to reduce time remaining by 1 second\n  useInterval(\n    () => {\n      setTimerData({\n        ...timerData,\n        timeRemaining: timerData.timeRemaining - 1,\n      });\n    },\n    timerData.isTimerRunning ? 1000 : null\n  );\n\n  return (\n    <div className=\"pomodoro\">\n      <InitialState\n        initialTimerData={initialTimerData}\n        timerData={timerData}\n        setTimerData={setTimerData}\n        formattedDurations={formattedDurations}\n      />\n      <ActiveState\n        initialTimerData={initialTimerData}\n        timerData={timerData}\n        setTimerData={setTimerData}\n        formattedDurations={formattedDurations}\n      />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}